---
interface Props {
  config?: any;
  resume?: any;
}
const { config, resume } = Astro.props as Props;
const basicsName = resume?.basics?.name || '';
const title = config?.seo?.title || basicsName || 'Portfolio';
const description = config?.seo?.description || (resume?.basics?.summary ? String(resume.basics.summary).slice(0,160) : '');
// Derive site URL: prefer build-time SITE (astro --site) or fallback to production domain
const siteUrl = (import.meta.env.SITE || 'https://mcintalmo.github.io').replace(/\/$/, '');
const imageUrl = siteUrl + '/assets/profile.png';
---
<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
		{description && <meta name="description" content={description} />}
		<meta property="og:title" content={title} />
		{description && <meta property="og:description" content={description} />}
		<meta property="og:type" content="website" />
		<meta property="og:url" content={siteUrl} />
		<meta property="og:image" content={imageUrl} />
		<meta name="twitter:card" content="summary_large_image" />
		<meta name="twitter:title" content={title} />
		{description && <meta name="twitter:description" content={description} />}
		<meta name="twitter:image" content={imageUrl} />
		<script type="application/ld+json">{JSON.stringify({
			'@context': 'https://schema.org',
			'@type': 'Person',
			name: basicsName,
			url: siteUrl,
			image: imageUrl,
			sameAs: (resume?.basics?.profiles || []).map((p: any) => p.url).filter(Boolean),
			jobTitle: resume?.basics?.label
		})}</script>
		<script type="application/ld+json">{JSON.stringify({
			'@context': 'https://schema.org',
			'@type': 'WebSite',
			url: siteUrl,
			name: title,
			description: description
		})}</script>
	</head>
	<body>
		<slot />
	</body>
</html>

<style>
	html,
	body {
		margin: 0;
		width: 100%;
		height: 100%;
	}
</style>
